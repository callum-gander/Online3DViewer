import { IsDefined } from "./core/core.js";
import { ValueOrDefault } from "./core/core.js";
import { CopyObjectAttributes } from "./core/core.js";
import { IsObjectEmpty } from "./core/core.js";
import { EscapeHtmlChars } from "./core/core.js";
import { EventNotifier } from "./core/eventnotifier.js";
import { TaskRunner } from "./core/taskrunner.js";
import { RunTaskAsync } from "./core/taskrunner.js";
import { RunTasks } from "./core/taskrunner.js";
import { RunTasksBatch } from "./core/taskrunner.js";
import { WaitWhile } from "./core/taskrunner.js";
import { Exporter } from "./export/exporter.js";
import { Exporter3dm } from "./export/exporter3dm.js";
import { ExportedFile } from "./export/exporterbase.js";
import { ExporterBase } from "./export/exporterbase.js";
import { ExporterBim } from "./export/exporterbim.js";
import { ExporterGltf } from "./export/exportergltf.js";
import { ExporterSettings } from "./export/exportermodel.js";
import { ExporterModel } from "./export/exportermodel.js";
import { ExporterObj } from "./export/exporterobj.js";
import { ExporterOff } from "./export/exporteroff.js";
import { ExporterPly } from "./export/exporterply.js";
import { ExporterStl } from "./export/exporterstl.js";
import { Box3D } from "./geometry/box3d.js";
import { BoundingBoxCalculator3D } from "./geometry/box3d.js";
import { Coord2D } from "./geometry/coord2d.js";
import { CoordIsEqual2D } from "./geometry/coord2d.js";
import { AddCoord2D } from "./geometry/coord2d.js";
import { SubCoord2D } from "./geometry/coord2d.js";
import { CoordDistance2D } from "./geometry/coord2d.js";
import { Coord3D } from "./geometry/coord3d.js";
import { CoordIsEqual3D } from "./geometry/coord3d.js";
import { AddCoord3D } from "./geometry/coord3d.js";
import { SubCoord3D } from "./geometry/coord3d.js";
import { CoordDistance3D } from "./geometry/coord3d.js";
import { DotVector3D } from "./geometry/coord3d.js";
import { VectorAngle3D } from "./geometry/coord3d.js";
import { CrossVector3D } from "./geometry/coord3d.js";
import { VectorLength3D } from "./geometry/coord3d.js";
import { ArrayToCoord3D } from "./geometry/coord3d.js";
import { Coord4D } from "./geometry/coord4d.js";
import { IsZero } from "./geometry/geometry.js";
import { IsLower } from "./geometry/geometry.js";
import { IsGreater } from "./geometry/geometry.js";
import { IsLowerOrEqual } from "./geometry/geometry.js";
import { IsGreaterOrEqual } from "./geometry/geometry.js";
import { IsEqual } from "./geometry/geometry.js";
import { IsEqualEps } from "./geometry/geometry.js";
import { IsPositive } from "./geometry/geometry.js";
import { IsNegative } from "./geometry/geometry.js";
import { Eps } from "./geometry/geometry.js";
import { BigEps } from "./geometry/geometry.js";
import { RadDeg } from "./geometry/geometry.js";
import { DegRad } from "./geometry/geometry.js";
import { Direction } from "./geometry/geometry.js";
import { Matrix } from "./geometry/matrix.js";
import { MatrixIsEqual } from "./geometry/matrix.js";
import { OctreeNode } from "./geometry/octree.js";
import { Octree } from "./geometry/octree.js";
import { Quaternion } from "./geometry/quaternion.js";
import { QuaternionIsEqual } from "./geometry/quaternion.js";
import { ArrayToQuaternion } from "./geometry/quaternion.js";
import { QuaternionFromAxisAngle } from "./geometry/quaternion.js";
import { QuaternionFromXYZ } from "./geometry/quaternion.js";
import { Transformation } from "./geometry/transformation.js";
import { TransformationIsEqual } from "./geometry/transformation.js";
import { BezierTweenFunction } from "./geometry/tween.js";
import { LinearTweenFunction } from "./geometry/tween.js";
import { ParabolicTweenFunction } from "./geometry/tween.js";
import { TweenCoord3D } from "./geometry/tween.js";
import { ImportSettings } from "./import/importer.js";
import { ImportError } from "./import/importer.js";
import { ImportResult } from "./import/importer.js";
import { ImporterFileAccessor } from "./import/importer.js";
import { Importer } from "./import/importer.js";
import { ImportErrorCode } from "./import/importer.js";
import { Importer3dm } from "./import/importer3dm.js";
import { Importer3ds } from "./import/importer3ds.js";
import { ImporterBase } from "./import/importerbase.js";
import { ImporterBim } from "./import/importerbim.js";
import { ImporterFcstd } from "./import/importerfcstd.js";
import { InputFile } from "./import/importerfiles.js";
import { ImporterFile } from "./import/importerfiles.js";
import { ImporterFileList } from "./import/importerfiles.js";
import { InputFilesFromUrls } from "./import/importerfiles.js";
import { InputFilesFromFileObjects } from "./import/importerfiles.js";
import { ImporterGltf } from "./import/importergltf.js";
import { ImporterIfc } from "./import/importerifc.js";
import { ImporterObj } from "./import/importerobj.js";
import { ImporterOcct } from "./import/importerocct.js";
import { ImporterOff } from "./import/importeroff.js";
import { ImporterPly } from "./import/importerply.js";
import { ImporterStl } from "./import/importerstl.js";
import { ImporterThreeSvg } from "./import/importersvg.js";
import { ImporterThreeBase } from "./import/importerthree.js";
import { ImporterThreeFbx } from "./import/importerthree.js";
import { ImporterThreeDae } from "./import/importerthree.js";
import { ImporterThreeWrl } from "./import/importerthree.js";
import { ImporterThree3mf } from "./import/importerthree.js";
import { ColorToMaterialConverter } from "./import/importerutils.js";
import { NameFromLine } from "./import/importerutils.js";
import { ParametersFromLine } from "./import/importerutils.js";
import { ReadLines } from "./import/importerutils.js";
import { IsPowerOfTwo } from "./import/importerutils.js";
import { NextPowerOfTwo } from "./import/importerutils.js";
import { UpdateMaterialTransparency } from "./import/importerutils.js";
import { BinaryReader } from "./io/binaryreader.js";
import { BinaryWriter } from "./io/binarywriter.js";
import { ArrayBufferToUtf8String } from "./io/bufferutils.js";
import { ArrayBufferToAsciiString } from "./io/bufferutils.js";
import { AsciiStringToArrayBuffer } from "./io/bufferutils.js";
import { Utf8StringToArrayBuffer } from "./io/bufferutils.js";
import { Base64DataURIToArrayBuffer } from "./io/bufferutils.js";
import { GetFileExtensionFromMimeType } from "./io/bufferutils.js";
import { CreateObjectUrl } from "./io/bufferutils.js";
import { CreateObjectUrlWithMimeType } from "./io/bufferutils.js";
import { RevokeObjectUrl } from "./io/bufferutils.js";
import { SetExternalLibLocation } from "./io/externallibs.js";
import { GetExternalLibPath } from "./io/externallibs.js";
import { LoadExternalLibrary } from "./io/externallibs.js";
import { GetFileName } from "./io/fileutils.js";
import { GetFileExtension } from "./io/fileutils.js";
import { RequestUrl } from "./io/fileutils.js";
import { ReadFile } from "./io/fileutils.js";
import { TransformFileHostUrls } from "./io/fileutils.js";
import { IsUrl } from "./io/fileutils.js";
import { FileSource } from "./io/fileutils.js";
import { FileFormat } from "./io/fileutils.js";
import { TextWriter } from "./io/textwriter.js";
import { RGBColor } from "./model/color.js";
import { RGBAColor } from "./model/color.js";
import { ColorComponentFromFloat } from "./model/color.js";
import { ColorComponentToFloat } from "./model/color.js";
import { RGBColorFromFloatComponents } from "./model/color.js";
import { SRGBToLinear } from "./model/color.js";
import { LinearToSRGB } from "./model/color.js";
import { IntegerToHexString } from "./model/color.js";
import { RGBColorToHexString } from "./model/color.js";
import { RGBAColorToHexString } from "./model/color.js";
import { HexStringToRGBColor } from "./model/color.js";
import { ArrayToRGBColor } from "./model/color.js";
import { RGBColorIsEqual } from "./model/color.js";
import { GeneratorParams } from "./model/generator.js";
import { Generator } from "./model/generator.js";
import { GeneratorHelper } from "./model/generator.js";
import { GenerateCuboid } from "./model/generator.js";
import { GenerateCone } from "./model/generator.js";
import { GenerateCylinder } from "./model/generator.js";
import { GenerateSphere } from "./model/generator.js";
import { GeneratePlatonicSolid } from "./model/generator.js";
import { TextureMap } from "./model/material.js";
import { MaterialBase } from "./model/material.js";
import { FaceMaterial } from "./model/material.js";
import { PhongMaterial } from "./model/material.js";
import { PhysicalMaterial } from "./model/material.js";
import { TextureMapIsEqual } from "./model/material.js";
import { TextureIsEqual } from "./model/material.js";
import { MaterialType } from "./model/material.js";
import { Mesh } from "./model/mesh.js";
import { MeshPrimitiveBuffer } from "./model/meshbuffer.js";
import { MeshBuffer } from "./model/meshbuffer.js";
import { ConvertMeshToMeshBuffer } from "./model/meshbuffer.js";
import { MeshInstanceId } from "./model/meshinstance.js";
import { MeshInstance } from "./model/meshinstance.js";
import { GetMeshType } from "./model/meshutils.js";
import { CalculateTriangleNormal } from "./model/meshutils.js";
import { TransformMesh } from "./model/meshutils.js";
import { FlipMeshTrianglesOrientation } from "./model/meshutils.js";
import { MeshType } from "./model/meshutils.js";
import { Model } from "./model/model.js";
import { FinalizeModel } from "./model/modelfinalization.js";
import { CheckModel } from "./model/modelfinalization.js";
import { IsModelEmpty } from "./model/modelutils.js";
import { GetBoundingBox } from "./model/modelutils.js";
import { GetTopology } from "./model/modelutils.js";
import { IsTwoManifold } from "./model/modelutils.js";
import { HasDefaultMaterial } from "./model/modelutils.js";
import { ReplaceDefaultMaterialColor } from "./model/modelutils.js";
import { Node } from "./model/node.js";
import { NodeType } from "./model/node.js";
import { Object3D } from "./model/object.js";
import { ModelObject3D } from "./model/object.js";
import { Property } from "./model/property.js";
import { PropertyGroup } from "./model/property.js";
import { PropertyToString } from "./model/property.js";
import { PropertyType } from "./model/property.js";
import { GetTriangleArea } from "./model/quantities.js";
import { GetTetrahedronSignedVolume } from "./model/quantities.js";
import { CalculateVolume } from "./model/quantities.js";
import { CalculateSurfaceArea } from "./model/quantities.js";
import { TopologyVertex } from "./model/topology.js";
import { TopologyEdge } from "./model/topology.js";
import { TopologyTriangleEdge } from "./model/topology.js";
import { TopologyTriangle } from "./model/topology.js";
import { Topology } from "./model/topology.js";
import { Triangle } from "./model/triangle.js";
import { ParameterListBuilder } from "./parameters/parameterlist.js";
import { ParameterListParser } from "./parameters/parameterlist.js";
import { CreateUrlBuilder } from "./parameters/parameterlist.js";
import { CreateUrlParser } from "./parameters/parameterlist.js";
import { CreateModelUrlParameters } from "./parameters/parameterlist.js";
import { ParameterConverter } from "./parameters/parameterlist.js";
import { ModelToThreeConversionParams } from "./threejs/threeconverter.js";
import { ModelToThreeConversionOutput } from "./threejs/threeconverter.js";
import { ThreeConversionStateHandler } from "./threejs/threeconverter.js";
import { ThreeNodeTree } from "./threejs/threeconverter.js";
import { ConvertModelToThreeObject } from "./threejs/threeconverter.js";
import { ThreeModelLoader } from "./threejs/threemodelloader.js";
import { HasHighpDriverIssue } from "./threejs/threeutils.js";
import { GetShadingType } from "./threejs/threeutils.js";
import { ConvertThreeColorToColor } from "./threejs/threeutils.js";
import { ConvertColorToThreeColor } from "./threejs/threeutils.js";
import { ConvertThreeGeometryToMesh } from "./threejs/threeutils.js";
import { DisposeThreeObjects } from "./threejs/threeutils.js";
import { ShadingType } from "./threejs/threeutils.js";
import { Camera } from "./viewer/camera.js";
import { CameraIsEqual3D } from "./viewer/camera.js";
import { CameraMode } from "./viewer/camera.js";
import { GetIntegerFromStyle } from "./viewer/domutils.js";
import { GetDomElementExternalWidth } from "./viewer/domutils.js";
import { GetDomElementExternalHeight } from "./viewer/domutils.js";
import { GetDomElementInnerDimensions } from "./viewer/domutils.js";
import { GetDomElementClientCoordinates } from "./viewer/domutils.js";
import { CreateDomElement } from "./viewer/domutils.js";
import { AddDomElement } from "./viewer/domutils.js";
import { AddDiv } from "./viewer/domutils.js";
import { ClearDomElement } from "./viewer/domutils.js";
import { InsertDomElementBefore } from "./viewer/domutils.js";
import { InsertDomElementAfter } from "./viewer/domutils.js";
import { ShowDomElement } from "./viewer/domutils.js";
import { IsDomElementVisible } from "./viewer/domutils.js";
import { SetDomElementWidth } from "./viewer/domutils.js";
import { SetDomElementHeight } from "./viewer/domutils.js";
import { GetDomElementOuterWidth } from "./viewer/domutils.js";
import { GetDomElementOuterHeight } from "./viewer/domutils.js";
import { SetDomElementOuterWidth } from "./viewer/domutils.js";
import { SetDomElementOuterHeight } from "./viewer/domutils.js";
import { CreateDiv } from "./viewer/domutils.js";
import { EmbeddedViewer } from "./viewer/embeddedviewer.js";
import { Init3DViewerElement } from "./viewer/embeddedviewer.js";
import { Init3DViewerElements } from "./viewer/embeddedviewer.js";
import { MouseInteraction } from "./viewer/navigation.js";
import { TouchInteraction } from "./viewer/navigation.js";
import { ClickDetector } from "./viewer/navigation.js";
import { Navigation } from "./viewer/navigation.js";
import { NavigationType } from "./viewer/navigation.js";
import { EnvironmentSettings } from "./viewer/shadingmodel.js";
import { ShadingModel } from "./viewer/shadingmodel.js";
import { CameraValidator } from "./viewer/viewer.js";
import { UpVector } from "./viewer/viewer.js";
import { Viewer } from "./viewer/viewer.js";
import { GetDefaultCamera } from "./viewer/viewer.js";
import { TraverseThreeObject } from "./viewer/viewer.js";
import { GetShadingTypeOfObject } from "./viewer/viewer.js";
import { ViewerModel } from "./viewer/viewermodel.js";
import { EdgeSettings } from "./viewer/viewermodel.js";
import { ViewerMainModel } from "./viewer/viewermodel.js";
import { SetThreeMeshPolygonOffset } from "./viewer/viewermodel.js";
export { IsDefined, ValueOrDefault, CopyObjectAttributes, IsObjectEmpty, EscapeHtmlChars, EventNotifier, TaskRunner, RunTaskAsync, RunTasks, RunTasksBatch, WaitWhile, Exporter, Exporter3dm, ExportedFile, ExporterBase, ExporterBim, ExporterGltf, ExporterSettings, ExporterModel, ExporterObj, ExporterOff, ExporterPly, ExporterStl, Box3D, BoundingBoxCalculator3D, Coord2D, CoordIsEqual2D, AddCoord2D, SubCoord2D, CoordDistance2D, Coord3D, CoordIsEqual3D, AddCoord3D, SubCoord3D, CoordDistance3D, DotVector3D, VectorAngle3D, CrossVector3D, VectorLength3D, ArrayToCoord3D, Coord4D, IsZero, IsLower, IsGreater, IsLowerOrEqual, IsGreaterOrEqual, IsEqual, IsEqualEps, IsPositive, IsNegative, Eps, BigEps, RadDeg, DegRad, Direction, Matrix, MatrixIsEqual, OctreeNode, Octree, Quaternion, QuaternionIsEqual, ArrayToQuaternion, QuaternionFromAxisAngle, QuaternionFromXYZ, Transformation, TransformationIsEqual, BezierTweenFunction, LinearTweenFunction, ParabolicTweenFunction, TweenCoord3D, ImportSettings, ImportError, ImportResult, ImporterFileAccessor, Importer, ImportErrorCode, Importer3dm, Importer3ds, ImporterBase, ImporterBim, ImporterFcstd, InputFile, ImporterFile, ImporterFileList, InputFilesFromUrls, InputFilesFromFileObjects, ImporterGltf, ImporterIfc, ImporterObj, ImporterOcct, ImporterOff, ImporterPly, ImporterStl, ImporterThreeSvg, ImporterThreeBase, ImporterThreeFbx, ImporterThreeDae, ImporterThreeWrl, ImporterThree3mf, ColorToMaterialConverter, NameFromLine, ParametersFromLine, ReadLines, IsPowerOfTwo, NextPowerOfTwo, UpdateMaterialTransparency, BinaryReader, BinaryWriter, ArrayBufferToUtf8String, ArrayBufferToAsciiString, AsciiStringToArrayBuffer, Utf8StringToArrayBuffer, Base64DataURIToArrayBuffer, GetFileExtensionFromMimeType, CreateObjectUrl, CreateObjectUrlWithMimeType, RevokeObjectUrl, SetExternalLibLocation, GetExternalLibPath, LoadExternalLibrary, GetFileName, GetFileExtension, RequestUrl, ReadFile, TransformFileHostUrls, IsUrl, FileSource, FileFormat, TextWriter, RGBColor, RGBAColor, ColorComponentFromFloat, ColorComponentToFloat, RGBColorFromFloatComponents, SRGBToLinear, LinearToSRGB, IntegerToHexString, RGBColorToHexString, RGBAColorToHexString, HexStringToRGBColor, ArrayToRGBColor, RGBColorIsEqual, GeneratorParams, Generator, GeneratorHelper, GenerateCuboid, GenerateCone, GenerateCylinder, GenerateSphere, GeneratePlatonicSolid, TextureMap, MaterialBase, FaceMaterial, PhongMaterial, PhysicalMaterial, TextureMapIsEqual, TextureIsEqual, MaterialType, Mesh, MeshPrimitiveBuffer, MeshBuffer, ConvertMeshToMeshBuffer, MeshInstanceId, MeshInstance, GetMeshType, CalculateTriangleNormal, TransformMesh, FlipMeshTrianglesOrientation, MeshType, Model, FinalizeModel, CheckModel, IsModelEmpty, GetBoundingBox, GetTopology, IsTwoManifold, HasDefaultMaterial, ReplaceDefaultMaterialColor, Node, NodeType, Object3D, ModelObject3D, Property, PropertyGroup, PropertyToString, PropertyType, GetTriangleArea, GetTetrahedronSignedVolume, CalculateVolume, CalculateSurfaceArea, TopologyVertex, TopologyEdge, TopologyTriangleEdge, TopologyTriangle, Topology, Triangle, ParameterListBuilder, ParameterListParser, CreateUrlBuilder, CreateUrlParser, CreateModelUrlParameters, ParameterConverter, ModelToThreeConversionParams, ModelToThreeConversionOutput, ThreeConversionStateHandler, ThreeNodeTree, ConvertModelToThreeObject, ThreeModelLoader, HasHighpDriverIssue, GetShadingType, ConvertThreeColorToColor, ConvertColorToThreeColor, ConvertThreeGeometryToMesh, DisposeThreeObjects, ShadingType, Camera, CameraIsEqual3D, CameraMode, GetIntegerFromStyle, GetDomElementExternalWidth, GetDomElementExternalHeight, GetDomElementInnerDimensions, GetDomElementClientCoordinates, CreateDomElement, AddDomElement, AddDiv, ClearDomElement, InsertDomElementBefore, InsertDomElementAfter, ShowDomElement, IsDomElementVisible, SetDomElementWidth, SetDomElementHeight, GetDomElementOuterWidth, GetDomElementOuterHeight, SetDomElementOuterWidth, SetDomElementOuterHeight, CreateDiv, EmbeddedViewer, Init3DViewerElement, Init3DViewerElements, MouseInteraction, TouchInteraction, ClickDetector, Navigation, NavigationType, EnvironmentSettings, ShadingModel, CameraValidator, UpVector, Viewer, GetDefaultCamera, TraverseThreeObject, GetShadingTypeOfObject, ViewerModel, EdgeSettings, ViewerMainModel, SetThreeMeshPolygonOffset };
//# sourceMappingURL=main.d.ts.map